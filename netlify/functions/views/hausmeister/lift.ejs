<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Burg Hochosterwitz - Lift-Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* Basis-Styling von dashboard.ejs übernommen */
        :root {
            --burg-red: #9B0600;
            --burg-gold: #C4A777;
            --burg-brown: #4A3C31;
            --burg-beige: #F5E6D3;
        }
        
        body {
            font-family: 'Times New Roman', serif;
            margin: 0;
            padding: 0;
            background-color: var(--burg-beige);
            color: var(--burg-brown);
        }
        
        .header {
            background-color: var(--burg-red);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }
        
        .lift-status {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .status-item {
            text-align: center;
            padding: 15px;
            background-color: var(--burg-beige);
            border-radius: 4px;
        }
        
        .status-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--burg-red);
        }
        
        .status-label {
            margin-top: 5px;
            color: var(--burg-brown);
        }
        
        .task-calendar {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
        }
        
        .calendar-day {
            aspect-ratio: 1;
            padding: 10px;
            border: 1px solid var(--burg-beige);
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .calendar-day:hover {
            background-color: var(--burg-beige);
        }
        
        .calendar-day.has-task {
            background-color: var(--burg-gold);
            color: white;
        }
        
        .task-list {
            margin-top: 30px;
        }
        
        .task-item {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .task-type {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 14px;
            background-color: var(--burg-gold);
            color: white;
        }
        
        .task-details {
            margin-bottom: 15px;
        }
        
        .materials-list {
            border-top: 1px solid var(--burg-beige);
            padding-top: 15px;
        }
        
        .material-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid var(--burg-beige);
        }
        
        .material-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .material-image {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 4px;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: var(--burg-gold);
            color: white;
            text-decoration: none;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-family: inherit;
            font-size: 16px;
        }
        
        .btn:hover {
            background-color: #B39666;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            z-index: 1000;
        }
        
        .modal-content {
            position: relative;
            background-color: white;
            margin: 50px auto;
            padding: 20px;
            width: 90%;
            max-width: 600px;
            border-radius: 8px;
        }
        
        .close-modal {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                text-align: center;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }
            
            .calendar-grid {
                grid-template-columns: repeat(7, 1fr);
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Lift-Management</h1>
        <a href="/dashboard" class="btn">Zurück zum Dashboard</a>
    </div>
    
    <div class="container">
        <div class="lift-status">
            <h2>Lift-Status</h2>
            <div class="status-grid">
                <div class="status-item">
                    <div class="status-value" id="nextMaintenance">--</div>
                    <div class="status-label">Tage bis zur nächsten Wartung</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="completedTasks">--</div>
                    <div class="status-label">Abgeschlossene Aufgaben</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="pendingTasks">--</div>
                    <div class="status-label">Ausstehende Aufgaben</div>
                </div>
            </div>
        </div>
        
        <div class="task-calendar">
            <div class="calendar-header">
                <button class="btn" onclick="previousMonth()">&lt;</button>
                <h2 id="currentMonth">März 2025</h2>
                <button class="btn" onclick="nextMonth()">&gt;</button>
            </div>
            <div class="calendar-grid" id="calendarGrid">
                <!-- Wird durch JavaScript gefüllt -->
            </div>
        </div>
        
        <div class="task-list" id="taskList">
            <!-- Wird durch JavaScript gefüllt -->
        </div>
    </div>
    
    <!-- Modal für Aufgabendetails -->
    <div id="taskModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div id="taskDetails">
                <!-- Wird durch JavaScript gefüllt -->
            </div>
        </div>
    </div>
    
    <script>
        let currentDate = new Date();
        let selectedDate = new Date();
        
        // Status laden
        async function loadLiftStatus() {
            try {
                const response = await fetch('/api/lift/status');
                const status = await response.json();
                
                document.getElementById('nextMaintenance').textContent = status.daysUntilMaintenance;
                document.getElementById('completedTasks').textContent = status.completedTasks;
                document.getElementById('pendingTasks').textContent = status.pendingTasks;
            } catch (error) {
                console.error('Fehler beim Laden des Lift-Status:', error);
            }
        }
        
        // Kalender erstellen
        function renderCalendar() {
            const grid = document.getElementById('calendarGrid');
            grid.innerHTML = '';
            
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            
            document.getElementById('currentMonth').textContent = 
                currentDate.toLocaleDateString('de-DE', { month: 'long', year: 'numeric' });
            
            // Wochentage
            const weekdays = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];
            weekdays.forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;
                grid.appendChild(dayElement);
            });
            
            // Leere Tage am Anfang
            for (let i = 0; i < firstDay.getDay(); i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day';
                grid.appendChild(emptyDay);
            }
            
            // Tage des Monats
            for (let day = 1; day <= lastDay.getDate(); day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;
                dayElement.onclick = () => selectDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), day));
                grid.appendChild(dayElement);
            }
        }
        
        // Datum auswählen
        async function selectDate(date) {
            selectedDate = date;
            document.querySelectorAll('.calendar-day').forEach(day => {
                day.classList.remove('selected');
            });
            
            try {
                const response = await fetch(`/api/lift/tasks?date=${date.toISOString()}`);
                const tasks = await response.json();
                
                const taskList = document.getElementById('taskList');
                taskList.innerHTML = `
                    <h2>Aufgaben für ${date.toLocaleDateString('de-DE')}</h2>
                    ${tasks.map(task => `
                        <div class="task-item">
                            <div class="task-header">
                                <h3>${task.title}</h3>
                                <span class="task-type">${formatType(task.type)}</span>
                            </div>
                            <div class="task-details">
                                <p><strong>Status:</strong> ${formatStatus(task.status)}</p>
                                <p><strong>Geplant für:</strong> ${formatDate(task.scheduledDate)}</p>
                                ${task.notes ? `<p><strong>Notizen:</strong> ${task.notes}</p>` : ''}
                            </div>
                            ${task.materials && task.materials.length > 0 ? `
                                <div class="materials-list">
                                    <h4>Benötigte Materialien:</h4>
                                    ${task.materials.map(material => `
                                        <div class="material-item">
                                            <div class="material-info">
                                                ${material.image ? `
                                                    <img src="${material.image}" alt="${material.name}" class="material-image">
                                                ` : ''}
                                                <div>
                                                    <div>${material.name}</div>
                                                    <div>${material.quantity} ${material.unit}</div>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            ` : ''}
                            <div style="margin-top: 15px;">
                                <button class="btn" onclick="updateTaskStatus('${task._id}', 'completed')">Als erledigt markieren</button>
                            </div>
                        </div>
                    `).join('')}
                `;
            } catch (error) {
                console.error('Fehler beim Laden der Aufgaben:', error);
            }
        }
        
        // Status aktualisieren
        async function updateTaskStatus(taskId, newStatus) {
            try {
                const response = await fetch(`/api/lift/${taskId}/status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status: newStatus
                    })
                });
                
                if (response.ok) {
                    loadLiftStatus();
                    selectDate(selectedDate);
                }
            } catch (error) {
                console.error('Fehler beim Aktualisieren des Status:', error);
            }
        }
        
        // Hilfsfunktionen
        function formatType(type) {
            const typeMap = {
                'maintenance': 'Wartung',
                'repair': 'Reparatur',
                'inspection': 'Inspektion'
            };
            return typeMap[type] || type;
        }
        
        function formatStatus(status) {
            const statusMap = {
                'scheduled': 'Geplant',
                'in_progress': 'In Arbeit',
                'completed': 'Abgeschlossen',
                'cancelled': 'Abgebrochen'
            };
            return statusMap[status] || status;
        }
        
        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('de-DE', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        }
        
        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        }
        
        // Initialisierung
        loadLiftStatus();
        renderCalendar();
        selectDate(new Date());
    </script>
</body>
</html>
