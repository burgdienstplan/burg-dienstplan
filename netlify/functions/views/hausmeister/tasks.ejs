<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Burg Hochosterwitz - Aufgabenverwaltung</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* Basis-Styling von dashboard.ejs übernommen */
        :root {
            --burg-red: #9B0600;
            --burg-gold: #C4A777;
            --burg-brown: #4A3C31;
            --burg-beige: #F5E6D3;
        }
        
        body {
            font-family: 'Times New Roman', serif;
            margin: 0;
            padding: 0;
            background-color: var(--burg-beige);
            color: var(--burg-brown);
        }
        
        .header {
            background-color: var(--burg-red);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }
        
        .task-filters {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .filter-group select {
            padding: 8px;
            border: 1px solid var(--burg-gold);
            border-radius: 4px;
            background-color: white;
        }
        
        .task-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .task-card {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            position: relative;
            cursor: pointer;
        }
        
        .task-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            border-radius: 8px 0 0 8px;
        }
        
        .task-card.priority-urgent::before { background-color: #ff0000; }
        .task-card.priority-high::before { background-color: #ff9800; }
        .task-card.priority-medium::before { background-color: #ffc107; }
        .task-card.priority-low::before { background-color: #4caf50; }
        
        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }
        
        .task-title {
            font-size: 18px;
            font-weight: bold;
            margin: 0;
        }
        
        .task-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 14px;
            background-color: var(--burg-gold);
            color: white;
        }
        
        .task-details {
            margin-bottom: 15px;
            font-size: 14px;
        }
        
        .task-details p {
            margin: 5px 0;
        }
        
        .task-images {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            overflow-x: auto;
            padding-bottom: 5px;
        }
        
        .task-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            cursor: zoom-in;
        }
        
        .task-comments {
            border-top: 1px solid var(--burg-beige);
            padding-top: 15px;
            max-height: 150px;
            overflow-y: auto;
        }
        
        .comment {
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .comment-author {
            font-weight: bold;
            color: var(--burg-brown);
        }
        
        .comment-date {
            font-size: 12px;
            color: #666;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            z-index: 1000;
        }
        
        .modal-content {
            position: relative;
            background-color: white;
            margin: 50px auto;
            padding: 20px;
            width: 90%;
            max-width: 600px;
            border-radius: 8px;
        }
        
        .close-modal {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: var(--burg-gold);
            color: white;
            text-decoration: none;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-family: inherit;
            font-size: 16px;
        }
        
        .btn:hover {
            background-color: #B39666;
        }
        
        .btn-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                text-align: center;
            }
            
            .task-filters {
                flex-direction: column;
            }
            
            .filter-group {
                width: 100%;
            }
            
            .filter-group select {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Aufgabenverwaltung</h1>
        <a href="/dashboard" class="btn">Zurück zum Dashboard</a>
    </div>
    
    <div class="container">
        <div class="task-filters">
            <div class="filter-group">
                <label for="priority">Priorität:</label>
                <select id="priority">
                    <option value="all">Alle</option>
                    <option value="urgent">Dringend</option>
                    <option value="high">Hoch</option>
                    <option value="medium">Mittel</option>
                    <option value="low">Niedrig</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="status">Status:</label>
                <select id="status">
                    <option value="all">Alle</option>
                    <option value="new">Neu</option>
                    <option value="in_progress">In Arbeit</option>
                    <option value="completed">Abgeschlossen</option>
                    <option value="cancelled">Abgebrochen</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="sort">Sortierung:</label>
                <select id="sort">
                    <option value="priority">Nach Priorität</option>
                    <option value="dueDate">Nach Fälligkeit</option>
                    <option value="createdAt">Nach Erstellung</option>
                </select>
            </div>
        </div>
        
        <div class="task-grid" id="taskGrid">
            <!-- Wird durch JavaScript gefüllt -->
        </div>
    </div>
    
    <!-- Modal für Aufgabendetails -->
    <div id="taskModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div id="taskDetails">
                <!-- Wird durch JavaScript gefüllt -->
            </div>
            <div class="btn-group">
                <button class="btn" onclick="updateTaskStatus('in_progress')">In Arbeit</button>
                <button class="btn" onclick="updateTaskStatus('completed')">Abgeschlossen</button>
                <button class="btn" onclick="updateTaskStatus('cancelled')">Abgebrochen</button>
            </div>
        </div>
    </div>
    
    <script>
        let currentTask = null;
        
        // Aufgaben laden
        async function loadTasks() {
            try {
                const priority = document.getElementById('priority').value;
                const status = document.getElementById('status').value;
                const sort = document.getElementById('sort').value;
                
                const response = await fetch(`/api/tasks?priority=${priority}&status=${status}&sort=${sort}`);
                const tasks = await response.json();
                
                const taskGrid = document.getElementById('taskGrid');
                taskGrid.innerHTML = '';
                
                tasks.forEach(task => {
                    const taskCard = document.createElement('div');
                    taskCard.className = `task-card priority-${task.priority}`;
                    taskCard.innerHTML = `
                        <div class="task-header">
                            <h3 class="task-title">${task.title}</h3>
                            <span class="task-status">${formatStatus(task.status)}</span>
                        </div>
                        <div class="task-details">
                            <p><strong>Priorität:</strong> ${formatPriority(task.priority)}</p>
                            <p><strong>Fällig:</strong> ${formatDate(task.dueDate)}</p>
                            <p>${task.description}</p>
                        </div>
                        ${task.images.length > 0 ? `
                            <div class="task-images">
                                ${task.images.map(img => `
                                    <img src="${img.url}" alt="${img.description}" class="task-image">
                                `).join('')}
                            </div>
                        ` : ''}
                    `;
                    
                    taskCard.onclick = () => showTaskDetails(task);
                    taskGrid.appendChild(taskCard);
                });
            } catch (error) {
                console.error('Fehler beim Laden der Aufgaben:', error);
            }
        }
        
        // Aufgabendetails anzeigen
        function showTaskDetails(task) {
            currentTask = task;
            const modal = document.getElementById('taskModal');
            const detailsDiv = document.getElementById('taskDetails');
            
            detailsDiv.innerHTML = `
                <h2>${task.title}</h2>
                <div class="task-details">
                    <p><strong>Status:</strong> ${formatStatus(task.status)}</p>
                    <p><strong>Priorität:</strong> ${formatPriority(task.priority)}</p>
                    <p><strong>Fällig:</strong> ${formatDate(task.dueDate)}</p>
                    <p><strong>Erstellt:</strong> ${formatDate(task.createdAt)}</p>
                    <p><strong>Beschreibung:</strong></p>
                    <p>${task.description}</p>
                </div>
                ${task.images.length > 0 ? `
                    <div class="task-images">
                        ${task.images.map(img => `
                            <img src="${img.url}" alt="${img.description}" class="task-image">
                        `).join('')}
                    </div>
                ` : ''}
                <div class="task-comments">
                    <h3>Kommentare</h3>
                    ${task.comments.map(comment => `
                        <div class="comment">
                            <span class="comment-author">${comment.author}</span>
                            <span class="comment-date">${formatDate(comment.createdAt)}</span>
                            <p>${comment.text}</p>
                        </div>
                    `).join('')}
                </div>
                <div class="comment-form">
                    <h3>Neuer Kommentar</h3>
                    <textarea id="newComment" rows="3" style="width: 100%; margin-bottom: 10px;"></textarea>
                </div>
            `;
            
            modal.style.display = 'block';
        }
        
        // Status aktualisieren
        async function updateTaskStatus(newStatus) {
            if (!currentTask) return;
            
            const comment = document.getElementById('newComment').value;
            
            try {
                const response = await fetch(`/api/tasks/${currentTask._id}/status`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status: newStatus,
                        comment: comment
                    })
                });
                
                if (response.ok) {
                    document.getElementById('taskModal').style.display = 'none';
                    loadTasks();
                }
            } catch (error) {
                console.error('Fehler beim Aktualisieren des Status:', error);
            }
        }
        
        // Hilfsfunktionen
        function formatStatus(status) {
            const statusMap = {
                'new': 'Neu',
                'in_progress': 'In Arbeit',
                'completed': 'Abgeschlossen',
                'cancelled': 'Abgebrochen'
            };
            return statusMap[status] || status;
        }
        
        function formatPriority(priority) {
            const priorityMap = {
                'urgent': 'Dringend',
                'high': 'Hoch',
                'medium': 'Mittel',
                'low': 'Niedrig'
            };
            return priorityMap[priority] || priority;
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'Nicht gesetzt';
            return new Date(dateString).toLocaleDateString('de-DE', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        // Event Listener
        document.querySelector('.close-modal').onclick = () => {
            document.getElementById('taskModal').style.display = 'none';
        };
        
        window.onclick = (event) => {
            const modal = document.getElementById('taskModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        };
        
        ['priority', 'status', 'sort'].forEach(id => {
            document.getElementById(id).onchange = loadTasks;
        });
        
        // Initial laden
        loadTasks();
    </script>
</body>
</html>
